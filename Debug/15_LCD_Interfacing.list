
15_LCD_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000988  08000988  00001988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800099c  0800099c  000019a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800099c  0800099c  000019a4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800099c  080009a4  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800099c  0800099c  0000199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080009a0  080009a0  000019a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009a4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009a4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000102a  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ea  00000000  00000000  000029fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b8  00000000  00000000  00002ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013b  00000000  00000000  000030a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000440  00000000  00000000  000031db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001919  00000000  00000000  0000361b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8e8  00000000  00000000  00004f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009081c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  00090860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00090e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000970 	.word	0x08000970

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000970 	.word	0x08000970

08000204 <mdelay>:
static void mdelay(uint32_t cnt);
static void udelay(uint32_t cnt);


static void mdelay(uint32_t cnt)//millisecond delay
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<(cnt*1000);i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <mdelay+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800021e:	fb02 f303 	mul.w	r3, r2, r3
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	429a      	cmp	r2, r3
 8000226:	d3f4      	bcc.n	8000212 <mdelay+0xe>
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <lcd_send_command>:
static void udelay(uint32_t cnt)//microsecond delay
{
	for(uint32_t i=0;i<(cnt*1);i++);
}
void lcd_send_command(uint8_t cmd)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	//RS=0 for LCD command
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB, LCD_GPIO_RS, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2105      	movs	r1, #5
 8000246:	480a      	ldr	r0, [pc, #40]	@ (8000270 <lcd_send_command+0x38>)
 8000248:	f000 fb4c 	bl	80008e4 <GPIO_WriteToOutputPin>

	//RW=0 for write
	//GPIO_WriteToOutputPin(LCD_GPIO_PORTB,LCD_GPIO_RW,GPIO_PIN_RESET);

	write_4_bits(cmd>>4);//higher nibble
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	091b      	lsrs	r3, r3, #4
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4618      	mov	r0, r3
 8000254:	f000 f91e 	bl	8000494 <write_4_bits>
	write_4_bits(cmd & 0x0F);//lower nibble
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f000 f917 	bl	8000494 <write_4_bits>
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020400 	.word	0x40020400

08000274 <lcd_enable>:

static void lcd_enable(void)//this enables the LCD to latch on to the values
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB,LCD_GPIO_EN,GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2104      	movs	r1, #4
 800027c:	4806      	ldr	r0, [pc, #24]	@ (8000298 <lcd_enable+0x24>)
 800027e:	f000 fb31 	bl	80008e4 <GPIO_WriteToOutputPin>
	mdelay(1);//udelay(1) changed to mdelay(1)
 8000282:	2001      	movs	r0, #1
 8000284:	f7ff ffbe 	bl	8000204 <mdelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB,LCD_GPIO_EN,GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2104      	movs	r1, #4
 800028c:	4802      	ldr	r0, [pc, #8]	@ (8000298 <lcd_enable+0x24>)
 800028e:	f000 fb29 	bl	80008e4 <GPIO_WriteToOutputPin>

	//any value greater than 37 microseconds
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40020400 	.word	0x40020400

0800029c <lcd_print_char>:



void lcd_print_char(uint8_t data)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	//RS=1 for LCD user data
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB,LCD_GPIO_RS,GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2105      	movs	r1, #5
 80002aa:	480a      	ldr	r0, [pc, #40]	@ (80002d4 <lcd_print_char+0x38>)
 80002ac:	f000 fb1a 	bl	80008e4 <GPIO_WriteToOutputPin>

	//Rw =0 for write
	//GPIO_WriteToOutputPin(LCD_GPIO_PORTB, LCD_GPIO_RW, GPIO_PIN_RESET);
	write_4_bits(data>>4);//higher nibble
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	091b      	lsrs	r3, r3, #4
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f8ec 	bl	8000494 <write_4_bits>
	write_4_bits(data & 0x0F);//lower nibble
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f8e5 	bl	8000494 <write_4_bits>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40020400 	.word	0x40020400

080002d8 <lcd_print_string>:


void lcd_print_string(char *message)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_print_char((uint8_t)*message++);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffd7 	bl	800029c <lcd_print_char>
	}while(*message!='\0');
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d1f4      	bne.n	80002e0 <lcd_print_string+0x8>
}
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <lcd_init>:

	mdelay(2);
	}

void lcd_init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b08a      	sub	sp, #40	@ 0x28
 8000304:	af00      	add	r7, sp, #0
	//1.Configure the GPIO pins which are used for LCD connections

	GPIO_Handle_t lcd_signalA,lcd_signalB,lcd_signalC;

	lcd_signalB.pGPIOx=GPIOB;
 8000306:	4b60      	ldr	r3, [pc, #384]	@ (8000488 <lcd_init+0x188>)
 8000308:	613b      	str	r3, [r7, #16]
	lcd_signalB.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 800030a:	2301      	movs	r3, #1
 800030c:	757b      	strb	r3, [r7, #21]
	lcd_signalB.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_RS;
 800030e:	2305      	movs	r3, #5
 8000310:	753b      	strb	r3, [r7, #20]
	lcd_signalB.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000312:	2300      	movs	r3, #0
 8000314:	763b      	strb	r3, [r7, #24]
	lcd_signalB.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000316:	2300      	movs	r3, #0
 8000318:	75fb      	strb	r3, [r7, #23]
	lcd_signalB.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800031a:	2302      	movs	r3, #2
 800031c:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(&lcd_signalB);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4618      	mov	r0, r3
 8000324:	f000 f948 	bl	80005b8 <GPIO_Init>
	lcd_signalB.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
	lcd_signalB.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
	lcd_signalB.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
	GPIO_Init(&lcd_signalB);*/

	lcd_signalB.pGPIOx=GPIOB;
 8000328:	4b57      	ldr	r3, [pc, #348]	@ (8000488 <lcd_init+0x188>)
 800032a:	613b      	str	r3, [r7, #16]
	lcd_signalB.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 800032c:	2301      	movs	r3, #1
 800032e:	757b      	strb	r3, [r7, #21]
	lcd_signalB.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_EN;
 8000330:	2304      	movs	r3, #4
 8000332:	753b      	strb	r3, [r7, #20]
	lcd_signalB.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000334:	2300      	movs	r3, #0
 8000336:	763b      	strb	r3, [r7, #24]
	lcd_signalB.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000338:	2300      	movs	r3, #0
 800033a:	75fb      	strb	r3, [r7, #23]
	lcd_signalB.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 800033c:	2302      	movs	r3, #2
 800033e:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(&lcd_signalB);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f937 	bl	80005b8 <GPIO_Init>

	lcd_signalA.pGPIOx=GPIOC;
 800034a:	4b50      	ldr	r3, [pc, #320]	@ (800048c <lcd_init+0x18c>)
 800034c:	61fb      	str	r3, [r7, #28]
	lcd_signalA.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 800034e:	2301      	movs	r3, #1
 8000350:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	lcd_signalA.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D4;
 8000354:	2307      	movs	r3, #7
 8000356:	f887 3020 	strb.w	r3, [r7, #32]
	lcd_signalA.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 800035a:	2300      	movs	r3, #0
 800035c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	lcd_signalA.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 8000360:	2300      	movs	r3, #0
 8000362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	lcd_signalA.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000366:	2302      	movs	r3, #2
 8000368:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_Init(&lcd_signalA);
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f921 	bl	80005b8 <GPIO_Init>


	lcd_signalA.pGPIOx=GPIOB;
 8000376:	4b44      	ldr	r3, [pc, #272]	@ (8000488 <lcd_init+0x188>)
 8000378:	61fb      	str	r3, [r7, #28]
	lcd_signalA.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 800037a:	2301      	movs	r3, #1
 800037c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	lcd_signalA.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D5;
 8000380:	2306      	movs	r3, #6
 8000382:	f887 3020 	strb.w	r3, [r7, #32]
	lcd_signalA.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 8000386:	2300      	movs	r3, #0
 8000388:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	lcd_signalA.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 800038c:	2300      	movs	r3, #0
 800038e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	lcd_signalA.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 8000392:	2302      	movs	r3, #2
 8000394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_Init(&lcd_signalA);
 8000398:	f107 031c 	add.w	r3, r7, #28
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f90b 	bl	80005b8 <GPIO_Init>

	lcd_signalA.pGPIOx=GPIOA;
 80003a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000490 <lcd_init+0x190>)
 80003a4:	61fb      	str	r3, [r7, #28]
	lcd_signalA.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 80003a6:	2301      	movs	r3, #1
 80003a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	lcd_signalA.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D6;
 80003ac:	2307      	movs	r3, #7
 80003ae:	f887 3020 	strb.w	r3, [r7, #32]
	lcd_signalA.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 80003b2:	2300      	movs	r3, #0
 80003b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	lcd_signalA.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80003b8:	2300      	movs	r3, #0
 80003ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	lcd_signalA.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80003be:	2302      	movs	r3, #2
 80003c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_Init(&lcd_signalA);
 80003c4:	f107 031c 	add.w	r3, r7, #28
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f8f5 	bl	80005b8 <GPIO_Init>
	/*GPIOA->MODER|=(1U<<6);
	GPIOA->OSPEEDR|=(1U<<6);
	GPIOA->OSPEEDR|=(1U<<7);  Ignore this*/


	lcd_signalA.pGPIOx=GPIOA;
 80003ce:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <lcd_init+0x190>)
 80003d0:	61fb      	str	r3, [r7, #28]
	lcd_signalA.GPIO_PinConfig.GPIO_PinMode=GPIO_MODE_OUT;
 80003d2:	2301      	movs	r3, #1
 80003d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	lcd_signalA.GPIO_PinConfig.GPIO_PinNumber=LCD_GPIO_D7;
 80003d8:	2306      	movs	r3, #6
 80003da:	f887 3020 	strb.w	r3, [r7, #32]
	lcd_signalA.GPIO_PinConfig.GPIO_PinOPType=GPIO_OP_TYPE_PP;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	lcd_signalA.GPIO_PinConfig.GPIO_PinPuPdControl=GPIO_NO_PUPD;
 80003e4:	2300      	movs	r3, #0
 80003e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	lcd_signalA.GPIO_PinConfig.GPIO_PinSpeed=GPIO_SPEED_FAST;
 80003ea:	2302      	movs	r3, #2
 80003ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	GPIO_Init(&lcd_signalA);
 80003f0:	f107 031c 	add.w	r3, r7, #28
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 f8df 	bl	80005b8 <GPIO_Init>


	GPIO_WriteToOutputPin(LCD_GPIO_PORTB, LCD_GPIO_RS, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2105      	movs	r1, #5
 80003fe:	4822      	ldr	r0, [pc, #136]	@ (8000488 <lcd_init+0x188>)
 8000400:	f000 fa70 	bl	80008e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB, LCD_GPIO_EN, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	481f      	ldr	r0, [pc, #124]	@ (8000488 <lcd_init+0x188>)
 800040a:	f000 fa6b 	bl	80008e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTC, LCD_GPIO_D4, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2107      	movs	r1, #7
 8000412:	481e      	ldr	r0, [pc, #120]	@ (800048c <lcd_init+0x18c>)
 8000414:	f000 fa66 	bl	80008e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTB, LCD_GPIO_D5, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2106      	movs	r1, #6
 800041c:	481a      	ldr	r0, [pc, #104]	@ (8000488 <lcd_init+0x188>)
 800041e:	f000 fa61 	bl	80008e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTA, LCD_GPIO_D6, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2107      	movs	r1, #7
 8000426:	481a      	ldr	r0, [pc, #104]	@ (8000490 <lcd_init+0x190>)
 8000428:	f000 fa5c 	bl	80008e4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORTA, LCD_GPIO_D7, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2106      	movs	r1, #6
 8000430:	4817      	ldr	r0, [pc, #92]	@ (8000490 <lcd_init+0x190>)
 8000432:	f000 fa57 	bl	80008e4 <GPIO_WriteToOutputPin>



	//2.Do the LCD initialization
	mdelay(40);
 8000436:	2028      	movs	r0, #40	@ 0x28
 8000438:	f7ff fee4 	bl	8000204 <mdelay>

	/*RS=0, for LCD command , have connected to ground */

		lcd_send_command(0x33);
 800043c:	2033      	movs	r0, #51	@ 0x33
 800043e:	f7ff fefb 	bl	8000238 <lcd_send_command>
		lcd_send_command(0x32);
 8000442:	2032      	movs	r0, #50	@ 0x32
 8000444:	f7ff fef8 	bl	8000238 <lcd_send_command>

		mdelay(5);
 8000448:	2005      	movs	r0, #5
 800044a:	f7ff fedb 	bl	8000204 <mdelay>
		//function set command
		lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 800044e:	2028      	movs	r0, #40	@ 0x28
 8000450:	f7ff fef2 	bl	8000238 <lcd_send_command>

		mdelay(5);
 8000454:	2005      	movs	r0, #5
 8000456:	f7ff fed5 	bl	8000204 <mdelay>


		lcd_send_command(LCD_CMD_DIS_CLEAR);
 800045a:	2001      	movs	r0, #1
 800045c:	f7ff feec 	bl	8000238 <lcd_send_command>

		mdelay(5);
 8000460:	2005      	movs	r0, #5
 8000462:	f7ff fecf 	bl	8000204 <mdelay>


		//disply ON and cursor on

		lcd_send_command(LCD_CMD_DON_CURON);
 8000466:	200e      	movs	r0, #14
 8000468:	f7ff fee6 	bl	8000238 <lcd_send_command>

		mdelay(5);
 800046c:	2005      	movs	r0, #5
 800046e:	f7ff fec9 	bl	8000204 <mdelay>


		//entry mode set
		lcd_send_command(LCD_CMD_INCADD);
 8000472:	2006      	movs	r0, #6
 8000474:	f7ff fee0 	bl	8000238 <lcd_send_command>

		mdelay(5);
 8000478:	2005      	movs	r0, #5
 800047a:	f7ff fec3 	bl	8000204 <mdelay>

}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	@ 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40020400 	.word	0x40020400
 800048c:	40020800 	.word	0x40020800
 8000490:	40020000 	.word	0x40020000

08000494 <write_4_bits>:

//Writes 4 bits of data/command to D4,5,6,7 lines
static void write_4_bits(uint8_t value)
	{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
			GPIO_WriteToOutputPin(LCD_GPIO_PORTC,LCD_GPIO_D4,(value>>0)&0x01);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	2107      	movs	r1, #7
 80004aa:	4815      	ldr	r0, [pc, #84]	@ (8000500 <write_4_bits+0x6c>)
 80004ac:	f000 fa1a 	bl	80008e4 <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(LCD_GPIO_PORTB,LCD_GPIO_D5,(value>>1)&0x01);//bringing all bits to LSB and then sending thru gpio
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	085b      	lsrs	r3, r3, #1
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	2106      	movs	r1, #6
 80004c0:	4810      	ldr	r0, [pc, #64]	@ (8000504 <write_4_bits+0x70>)
 80004c2:	f000 fa0f 	bl	80008e4 <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(LCD_GPIO_PORTA,LCD_GPIO_D6,(value>>2)&0x01);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	089b      	lsrs	r3, r3, #2
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	f003 0301 	and.w	r3, r3, #1
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	2107      	movs	r1, #7
 80004d6:	480c      	ldr	r0, [pc, #48]	@ (8000508 <write_4_bits+0x74>)
 80004d8:	f000 fa04 	bl	80008e4 <GPIO_WriteToOutputPin>
			GPIO_WriteToOutputPin(LCD_GPIO_PORTA,LCD_GPIO_D7,(value>>3)&0x01);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	2106      	movs	r1, #6
 80004ec:	4806      	ldr	r0, [pc, #24]	@ (8000508 <write_4_bits+0x74>)
 80004ee:	f000 f9f9 	bl	80008e4 <GPIO_WriteToOutputPin>

			lcd_enable();//after writing every nibble we have to instruct the LCD to latch that Data
 80004f2:	f7ff febf 	bl	8000274 <lcd_enable>
		}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40020800 	.word	0x40020800
 8000504:	40020400 	.word	0x40020400
 8000508:	40020000 	.word	0x40020000

0800050c <main>:

#include "stm32f446xx.h"
#include "lcd.h"  // your header file with lcd_init(), lcd_print_char(), etc.

int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
	RCC->AHB1ENR|=(1U<<0);
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <main+0x50>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	4a11      	ldr	r2, [pc, #68]	@ (800055c <main+0x50>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR|=(1U<<1);
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <main+0x50>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <main+0x50>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR|=(1U<<2);
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <main+0x50>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a0b      	ldr	r2, [pc, #44]	@ (800055c <main+0x50>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
    // Initialize the LCD
    lcd_init();
 8000536:	f7ff fee3 	bl	8000300 <lcd_init>

    // Optional: move cursor to row 1, column 1

    // Print the character 'A'
    char arr[20]="Hello world";
 800053a:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <main+0x54>)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000540:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
    lcd_print_string(&arr[0]);
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff fec1 	bl	80002d8 <lcd_print_string>
    while (1);
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0x4a>
 800055a:	bf00      	nop
 800055c:	40023800 	.word	0x40023800
 8000560:	08000988 	.word	0x08000988

08000564 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
;  ldr   r0, =_estack
 8000564:	480d      	ldr	r0, [pc, #52]	@ (800059c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000566:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000568:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800056c:	480c      	ldr	r0, [pc, #48]	@ (80005a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490d      	ldr	r1, [pc, #52]	@ (80005a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0a      	ldr	r4, [pc, #40]	@ (80005b0 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000592:	f000 f9c9 	bl	8000928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff ffb9 	bl	800050c <main>

0800059a <LoopForever>:

LoopForever:
  b LoopForever
 800059a:	e7fe      	b.n	800059a <LoopForever>
;  ldr   r0, =_estack
 800059c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005a8:	080009a4 	.word	0x080009a4
  ldr r2, =_sbss
 80005ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005b0:	2000001c 	.word	0x2000001c

080005b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC_IRQHandler>
	...

080005b8 <GPIO_Init>:

	}
}
//Init and De-init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)//takes pointer to the Handle and thats it. user shld create a variable of "GPIO_Handle_t" type and send its pointer to this function
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
	//1.configure the mode of the gpio pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	795b      	ldrb	r3, [r3, #5]
 80005c8:	2b03      	cmp	r3, #3
 80005ca:	d81f      	bhi.n	800060c <GPIO_Init+0x54>
	{
	    uint32_t pin = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	617b      	str	r3, [r7, #20]
	    uint32_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	613b      	str	r3, [r7, #16]

	    // Clear the 2 bits for that pin
	    pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pin));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	2103      	movs	r1, #3
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	4619      	mov	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]

	    // Set the desired mode
	    pGPIOHandle->pGPIOx->MODER |= (mode << (2 * pin));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	409a      	lsls	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	e0b8      	b.n	800077e <GPIO_Init+0x1c6>
	}
	else
	{
		//this will be interrupt mode (coded later)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)//falling edge detection
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b04      	cmp	r3, #4
 8000612:	d115      	bne.n	8000640 <GPIO_Init+0x88>
		{
			//1.Configure the FTSR
			EXTI->FTSR|=(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b44      	ldr	r3, [pc, #272]	@ (8000728 <GPIO_Init+0x170>)
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	2301      	movs	r3, #1
 8000620:	408b      	lsls	r3, r1
 8000622:	4941      	ldr	r1, [pc, #260]	@ (8000728 <GPIO_Init+0x170>)
 8000624:	4313      	orrs	r3, r2
 8000626:	60cb      	str	r3, [r1, #12]

			//clear the RTSR bit
			EXTI->RTSR&=~(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b3f      	ldr	r3, [pc, #252]	@ (8000728 <GPIO_Init+0x170>)
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	2301      	movs	r3, #1
 8000634:	408b      	lsls	r3, r1
 8000636:	43db      	mvns	r3, r3
 8000638:	493b      	ldr	r1, [pc, #236]	@ (8000728 <GPIO_Init+0x170>)
 800063a:	4013      	ands	r3, r2
 800063c:	608b      	str	r3, [r1, #8]
 800063e:	e031      	b.n	80006a4 <GPIO_Init+0xec>

		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)//rising edge detection
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	795b      	ldrb	r3, [r3, #5]
 8000644:	2b05      	cmp	r3, #5
 8000646:	d115      	bne.n	8000674 <GPIO_Init+0xbc>
		{
			//1.Configure the RTSR
			EXTI->RTSR|=(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000648:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <GPIO_Init+0x170>)
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	4619      	mov	r1, r3
 8000652:	2301      	movs	r3, #1
 8000654:	408b      	lsls	r3, r1
 8000656:	4934      	ldr	r1, [pc, #208]	@ (8000728 <GPIO_Init+0x170>)
 8000658:	4313      	orrs	r3, r2
 800065a:	608b      	str	r3, [r1, #8]
			//clearing the corresp FTSR
			EXTI->FTSR&=~(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b32      	ldr	r3, [pc, #200]	@ (8000728 <GPIO_Init+0x170>)
 800065e:	68da      	ldr	r2, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	4619      	mov	r1, r3
 8000666:	2301      	movs	r3, #1
 8000668:	408b      	lsls	r3, r1
 800066a:	43db      	mvns	r3, r3
 800066c:	492e      	ldr	r1, [pc, #184]	@ (8000728 <GPIO_Init+0x170>)
 800066e:	4013      	ands	r3, r2
 8000670:	60cb      	str	r3, [r1, #12]
 8000672:	e017      	b.n	80006a4 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)//both rising and falling
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	2b06      	cmp	r3, #6
 800067a:	d113      	bne.n	80006a4 <GPIO_Init+0xec>
		{
			//1.Configure the FTSR AND RTSR
			EXTI->RTSR|=(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <GPIO_Init+0x170>)
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2301      	movs	r3, #1
 8000688:	408b      	lsls	r3, r1
 800068a:	4927      	ldr	r1, [pc, #156]	@ (8000728 <GPIO_Init+0x170>)
 800068c:	4313      	orrs	r3, r2
 800068e:	608b      	str	r3, [r1, #8]
			EXTI->FTSR|=(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <GPIO_Init+0x170>)
 8000692:	68da      	ldr	r2, [r3, #12]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	4619      	mov	r1, r3
 800069a:	2301      	movs	r3, #1
 800069c:	408b      	lsls	r3, r1
 800069e:	4922      	ldr	r1, [pc, #136]	@ (8000728 <GPIO_Init+0x170>)
 80006a0:	4313      	orrs	r3, r2
 80006a2:	60cb      	str	r3, [r1, #12]
		}
		//2.Configure the GPIO port selection in SYSCFG_EXTICR
		int8_t temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;//to get to know which EXTIx to use[0],[1],[2],[3]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	791b      	ldrb	r3, [r3, #4]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	76fb      	strb	r3, [r7, #27]
		uint8_t temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	f003 0303 	and.w	r3, r3, #3
 80006b6:	76bb      	strb	r3, [r7, #26]
		uint8_t portcode=GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	@ (800072c <GPIO_Init+0x174>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d044      	beq.n	800074c <GPIO_Init+0x194>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000730 <GPIO_Init+0x178>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d02b      	beq.n	8000724 <GPIO_Init+0x16c>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a18      	ldr	r2, [pc, #96]	@ (8000734 <GPIO_Init+0x17c>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d024      	beq.n	8000720 <GPIO_Init+0x168>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <GPIO_Init+0x180>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01d      	beq.n	800071c <GPIO_Init+0x164>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a15      	ldr	r2, [pc, #84]	@ (800073c <GPIO_Init+0x184>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d016      	beq.n	8000718 <GPIO_Init+0x160>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a14      	ldr	r2, [pc, #80]	@ (8000740 <GPIO_Init+0x188>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00f      	beq.n	8000714 <GPIO_Init+0x15c>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <GPIO_Init+0x18c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d008      	beq.n	8000710 <GPIO_Init+0x158>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <GPIO_Init+0x190>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d101      	bne.n	800070c <GPIO_Init+0x154>
 8000708:	2307      	movs	r3, #7
 800070a:	e020      	b.n	800074e <GPIO_Init+0x196>
 800070c:	2300      	movs	r3, #0
 800070e:	e01e      	b.n	800074e <GPIO_Init+0x196>
 8000710:	2306      	movs	r3, #6
 8000712:	e01c      	b.n	800074e <GPIO_Init+0x196>
 8000714:	2305      	movs	r3, #5
 8000716:	e01a      	b.n	800074e <GPIO_Init+0x196>
 8000718:	2304      	movs	r3, #4
 800071a:	e018      	b.n	800074e <GPIO_Init+0x196>
 800071c:	2303      	movs	r3, #3
 800071e:	e016      	b.n	800074e <GPIO_Init+0x196>
 8000720:	2302      	movs	r3, #2
 8000722:	e014      	b.n	800074e <GPIO_Init+0x196>
 8000724:	2301      	movs	r3, #1
 8000726:	e012      	b.n	800074e <GPIO_Init+0x196>
 8000728:	40013c00 	.word	0x40013c00
 800072c:	40020000 	.word	0x40020000
 8000730:	40020400 	.word	0x40020400
 8000734:	40020800 	.word	0x40020800
 8000738:	40020c00 	.word	0x40020c00
 800073c:	40021000 	.word	0x40021000
 8000740:	40021400 	.word	0x40021400
 8000744:	40021800 	.word	0x40021800
 8000748:	40021c00 	.word	0x40021c00
 800074c:	2300      	movs	r3, #0
 800074e:	767b      	strb	r3, [r7, #25]
		SYSCFG_PCK_EN();
 8000750:	f000 f8b8 	bl	80008c4 <SYSCFG_PCK_EN>
		SYSCFG->EXTICR[temp1]=portcode<<(temp2*4);
 8000754:	7e7a      	ldrb	r2, [r7, #25]
 8000756:	7ebb      	ldrb	r3, [r7, #26]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	fa02 f103 	lsl.w	r1, r2, r3
 800075e:	4a57      	ldr	r2, [pc, #348]	@ (80008bc <GPIO_Init+0x304>)
 8000760:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000764:	3302      	adds	r3, #2
 8000766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.Enable the exti interrupt delivery using IMR
		EXTI->IMR|=(1U<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076a:	4b55      	ldr	r3, [pc, #340]	@ (80008c0 <GPIO_Init+0x308>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	2301      	movs	r3, #1
 8000776:	408b      	lsls	r3, r1
 8000778:	4951      	ldr	r1, [pc, #324]	@ (80008c0 <GPIO_Init+0x308>)
 800077a:	4313      	orrs	r3, r2
 800077c:	600b      	str	r3, [r1, #0]
	}
	temp=0;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
	//2.configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR&=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	689a      	ldr	r2, [r3, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	2303      	movs	r3, #3
 80007a2:	408b      	lsls	r3, r1
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	400a      	ands	r2, r1
 80007ae:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR|=temp;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6899      	ldr	r1, [r3, #8]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	430a      	orrs	r2, r1
 80007be:	609a      	str	r2, [r3, #8]
	temp=0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
	//3.configure the pupd setting
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	79db      	ldrb	r3, [r3, #7]
 80007c8:	461a      	mov	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	791b      	ldrb	r3, [r3, #4]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR&=~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	4619      	mov	r1, r3
 80007e2:	2303      	movs	r3, #3
 80007e4:	408b      	lsls	r3, r1
 80007e6:	43db      	mvns	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	400a      	ands	r2, r1
 80007f0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68d9      	ldr	r1, [r3, #12]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	69fa      	ldr	r2, [r7, #28]
 80007fe:	430a      	orrs	r2, r1
 8000800:	60da      	str	r2, [r3, #12]
	temp=0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
	//4.configure the otype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));//each pin occupies a single bit so multiplying by 2 is not required
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	7a1b      	ldrb	r3, [r3, #8]
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER&=~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	2301      	movs	r3, #1
 8000824:	408b      	lsls	r3, r1
 8000826:	43db      	mvns	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	400a      	ands	r2, r1
 8000830:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER|=temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6859      	ldr	r1, [r3, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	69fa      	ldr	r2, [r7, #28]
 800083e:	430a      	orrs	r2, r1
 8000840:	605a      	str	r2, [r3, #4]
	temp=0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
	//5.configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_ALTFN)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	795b      	ldrb	r3, [r3, #5]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d132      	bne.n	80008b4 <GPIO_Init+0x2fc>
	{
		//configure the alternate function registers
		uint32_t temp1,temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%8;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1]&=~(0xF<<(4*temp2));//clearing
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	210f      	movs	r1, #15
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	4619      	mov	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4011      	ands	r1, r2
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	3208      	adds	r2, #8
 8000886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1]|=(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode<<(4*temp2));
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	3208      	adds	r2, #8
 8000892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7a5b      	ldrb	r3, [r3, #9]
 800089a:	4619      	mov	r1, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4311      	orrs	r1, r2
 80008ac:	68fa      	ldr	r2, [r7, #12]
 80008ae:	3208      	adds	r2, #8
 80008b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}
}
 80008b4:	bf00      	nop
 80008b6:	3720      	adds	r7, #32
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40013800 	.word	0x40013800
 80008c0:	40013c00 	.word	0x40013c00

080008c4 <SYSCFG_PCK_EN>:
		GPIOH_REG_RESET();
	}
}

void SYSCFG_PCK_EN(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	RCC->APB2ENR|=(1U<<14);
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <SYSCFG_PCK_EN+0x1c>)
 80008ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <SYSCFG_PCK_EN+0x1c>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <GPIO_WriteToOutputPin>:
	value=pGPIOx->IDR;//right shifting the value in pin no. x so that it comes to pin 0 and anding with 1
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber,uint8_t Value)//Value=0 or 1

{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
 80008f0:	4613      	mov	r3, r2
 80008f2:	70bb      	strb	r3, [r7, #2]
	if (Value)
 80008f4:	78bb      	ldrb	r3, [r7, #2]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d007      	beq.n	800090a <GPIO_WriteToOutputPin+0x26>
	    {
	        pGPIOx->BSRR = (1 << PinNumber);           // Set pin
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	2201      	movs	r2, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	619a      	str	r2, [r3, #24]
	    }
	    else
	    {
	        pGPIOx->BSRR = (1 << (PinNumber + 16));    // Reset pin
	    }
}
 8000908:	e007      	b.n	800091a <GPIO_WriteToOutputPin+0x36>
	        pGPIOx->BSRR = (1 << (PinNumber + 16));    // Reset pin
 800090a:	78fb      	ldrb	r3, [r7, #3]
 800090c:	3310      	adds	r3, #16
 800090e:	2201      	movs	r2, #1
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	619a      	str	r2, [r3, #24]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <__libc_init_array>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4d0d      	ldr	r5, [pc, #52]	@ (8000960 <__libc_init_array+0x38>)
 800092c:	4c0d      	ldr	r4, [pc, #52]	@ (8000964 <__libc_init_array+0x3c>)
 800092e:	1b64      	subs	r4, r4, r5
 8000930:	10a4      	asrs	r4, r4, #2
 8000932:	2600      	movs	r6, #0
 8000934:	42a6      	cmp	r6, r4
 8000936:	d109      	bne.n	800094c <__libc_init_array+0x24>
 8000938:	4d0b      	ldr	r5, [pc, #44]	@ (8000968 <__libc_init_array+0x40>)
 800093a:	4c0c      	ldr	r4, [pc, #48]	@ (800096c <__libc_init_array+0x44>)
 800093c:	f000 f818 	bl	8000970 <_init>
 8000940:	1b64      	subs	r4, r4, r5
 8000942:	10a4      	asrs	r4, r4, #2
 8000944:	2600      	movs	r6, #0
 8000946:	42a6      	cmp	r6, r4
 8000948:	d105      	bne.n	8000956 <__libc_init_array+0x2e>
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000950:	4798      	blx	r3
 8000952:	3601      	adds	r6, #1
 8000954:	e7ee      	b.n	8000934 <__libc_init_array+0xc>
 8000956:	f855 3b04 	ldr.w	r3, [r5], #4
 800095a:	4798      	blx	r3
 800095c:	3601      	adds	r6, #1
 800095e:	e7f2      	b.n	8000946 <__libc_init_array+0x1e>
 8000960:	0800099c 	.word	0x0800099c
 8000964:	0800099c 	.word	0x0800099c
 8000968:	0800099c 	.word	0x0800099c
 800096c:	080009a0 	.word	0x080009a0

08000970 <_init>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	bf00      	nop
 8000974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000976:	bc08      	pop	{r3}
 8000978:	469e      	mov	lr, r3
 800097a:	4770      	bx	lr

0800097c <_fini>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	bf00      	nop
 8000980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000982:	bc08      	pop	{r3}
 8000984:	469e      	mov	lr, r3
 8000986:	4770      	bx	lr
